{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["URL","App","props","useState","Code","setCode","Output","setOutput","isOutputLoading","setIsOutputLoading","useEffect","console","log","handleCodeSubmit","a","body","script","language","versionIndex","clientId","clientSecret","stdin","axios","post","crossDomain","headers","crossdomain","crossorigin","proxy","host","then","res","data","output","catch","err","className","style","border","padding","borderRadius","boxShadow","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","value","onChange","mode","theme","width","id","disabled","onClick","backgroundColor","color","height","transition","fontSize","textAlign","outline","overflowWrap","fontFamily","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAoLMA,G,8BAAM,cAyHGC,EAvHH,SAACC,GAAW,IAAD,EACGC,mBAAS,IADZ,mBACdC,EADc,KACRC,EADQ,OAEOF,mBAAS,gBAFhB,mBAEdG,EAFc,KAENC,EAFM,OAGyBJ,oBAAS,GAHlC,mBAGdK,EAHc,KAGGC,EAHH,KAKrBC,qBAAU,WACRC,QAAQC,IAAIR,KACX,CAACA,IAEJ,IAAMS,EAAgB,uCAAG,4BAAAC,EAAA,6DACvBL,GAAmB,GACbM,EAAO,CACXC,OAAQZ,EACRa,SAAU,UACVC,aAAc,IACdC,SApBY,mCAqBZC,aAnBJ,mEAoBIC,MAAO,MACP,8BAA+B,IAC/B,eAAgB,oBAVK,SAajBC,IACHC,KAAKvB,EAAKe,EAAM,CACfS,aAAa,EACbC,QAAS,CACP,8BAA+B,IAC/BC,YAAa,OACbC,YAAa,QAEfC,MAAO,CAAEC,KAAM,8BAEhBC,MAAK,SAACC,GACLtB,GAAmB,GACnBE,QAAQC,IAAImB,GACZxB,EAAUwB,EAAIC,KAAKC,WAEpBC,OAAM,SAACC,GACNxB,QAAQC,IAAIuB,MA7BO,2CAAH,qDAiCtB,OACE,sBAAKC,UAAU,MAAf,UAEE,8CAAiBpC,KACjB,sBACEoC,UAAU,MACVC,MAAO,CACLC,OAAQ,kBACRC,QAAS,MACTC,aAAc,OACdC,UAAW,sBANf,UASE,cAAC,IAAD,CACEC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,MAAOzC,EACP0C,SAAU,SAACD,GACTxC,EAAQwC,IAEVE,KAAK,SACLC,MAAM,WACNX,MAAO,CAAEY,MAAO,UAGlB,yBACEC,GAAG,mBACHd,UAAU,mBACVe,SAAU3C,EACV4C,QAAS,WACPzC,QAAQC,IAAIR,GACZS,KAEFwB,MAAO,CACLgB,gBAAiB,SACjBC,MAAO,QACPC,OAAQ,GACRN,MAAO,OACPO,WAAY,KACZC,SAAU,GACVC,UAAW,SACXC,QAAS,QAhBb,UAmBGnD,GAAmB,eAClBA,GAAmB,aAGvB,qBACE6B,MAAO,CACLgB,gBAAiB,QACjBO,aAAc,aACdX,MAAO,QACPM,OAAQ,OACRhB,QAAS,OACTD,OAAQ,mBAPZ,SAUE,oBACED,MAAO,CACLiB,MAAO,OACPO,WAAY,YACZH,UAAW,OACXD,SAAU,IALd,UAQG,IARH,8DAS6D,uBAAO,IACjE,IAAMnD,c,QCzRJwD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cf455d90.chunk.js","sourcesContent":["// import { useState, useEffect, useRef, useCallback, useMemo } from \"react\";\n// import Webcam from \"react-webcam\";\n// import { io } from \"socket.io-client\";\n// import \"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\n\n//////////////////////////////////////////////////////////////////\n\n// const App = (props) => {\n//   const socket = io(\"http://localhost:4001\", {\n//     reconnection: true,\n//     reconnectionDelay: 1000,\n//     reconnectionDelayMax: 5000,\n//     reconnectionAttempts: 99999,\n//   });\n//   const [Connected, setConnected] = useState(\"false\");\n//   const [imgSrc, setImgSrc] = useState();\n\n//   const videoConstraints = {\n//     width: 1000,\n//     height: 1000,\n//   };\n\n//   const webcamRef = useRef(null);\n\n//   const capture = () => {\n//     const imageSrc = webcamRef.current.getScreenshot();\n//     console.log(imageSrc);\n\n//     setImgSrc(imageSrc);\n//   };\n\n//   useEffect(() => {\n//     socket.on(\"connection\", () => setConnected(\"True\"));\n//     socket.on(\"ACK_SUCCESS\", (id) => {\n//       alert(\"AcknowledgeMent Successful : \" + id);\n//     });\n//   }, []);\n\n//   const sendAckToServer = () => {\n//     socket.emit(\"CONNECTION_FROM_CLIENT_TO_SERVER\", {\n//       id: socket.id,\n//       message: \"Hello! Im \" + socket.id,\n//     });\n//     console.log(\"ACK\");\n//   };\n\n//   return (\n//     <div className=\" container \">\n//       <div\n//         className=\"\"\n//         style={{ height: \"100px\", width: \"0px\", border: \"1px solid\" }}\n//       >\n//         <Webcam\n//           position=\"relative\"\n//           mar\n//           audio={false}\n//           height={\"100px\"}\n//           ref={webcamRef}\n//           screenshotFormat=\"image/jpeg\"\n//           width={\"500\"}\n//           videoConstraints={videoConstraints}\n//         />\n//       </div>\n\n//       <button className=\"btn btn-success\" onClick={capture}>\n//         Capture photo\n//       </button>\n//       <h1>Here we go with Socket And react ðŸ’™</h1>\n\n//       <button onClick={sendAckToServer} className=\"btn btn-success\">\n//         Send Ack Message To Server\n//       </button>\n//       <h2> Connection : {Connected}</h2>\n//       <div style={{ width: \"200px\", wordWrap: \"normal\" }}>\n//         <img src={imgSrc} alt=\"Photo\" />\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default App;\n\n// import React, { useState, useEffect } from \"react\";\n// import logo from \"./logo.svg\";\n// import \"./App.css\";\n\n// import io from \"socket.io-client\";\n// const socket = io(\"http://localhost:4001\");\n\n// function App() {\n//   const [messageCount, setMessageCount] = useState(0);\n//   const [theme, setTheme] = useState(\"dark\");\n//   const [inRoom, setInRoom] = useState(false);\n\n//   useEffect(() => {\n//     if (inRoom) {\n//       console.log(\"joining room\");\n//       socket.emit(\"room\", { room: \"test-room\" });\n//     }\n\n//     return () => {\n//       if (inRoom) {\n//         console.log(\"leaving room\");\n//         socket.emit(\"leave room\", {\n//           room: \"test-room\",\n//         });\n//       }\n//     };\n//   });\n\n//   useEffect(() => {\n//     socket.on(\"receive message\", (payload) => {\n//       setMessageCount(messageCount + 1);\n//       document.title = `${messageCount} new messages have been emitted`;\n//     });\n//   }, [messageCount]); //only re-run the effect if new message comes in\n\n//   const handleSetTheme = () => {\n//     let newTheme;\n//     theme === \"light\" ? (newTheme = \"dark\") : (newTheme = \"light\");\n//     console.log(\"new theme: \" + newTheme);\n//     setTheme(newTheme);\n//   };\n\n//   const handleInRoom = () => {\n//     inRoom ? setInRoom(false) : setInRoom(true);\n//   };\n\n//   const handleNewMessage = () => {\n//     console.log(\"emitting new message\");\n//     socket.emit(\"new message\", {\n//       room: \"test-room\",\n//     });\n//     setMessageCount(messageCount + 1);\n//   };\n\n//   return (\n//     <div className={`App Theme-${theme}`}>\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n//         <h1>\n//           {inRoom && `You Have Entered The Room`}\n//           {!inRoom && `Outside Room`}\n//         </h1>\n\n//         <p>{messageCount} messages have been emitted</p>\n\n//         {inRoom && (\n//           <button onClick={() => handleNewMessage()}>Emit new message</button>\n//         )}\n\n//         <button onClick={() => handleSetTheme()}>Toggle Theme</button>\n\n//         <button onClick={() => handleInRoom()}>\n//           {inRoom && `Leave Room`}\n//           {!inRoom && `Enter Room`}\n//         </button>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//////////////////////////////////////////////////////////////\nimport AceEditor from \"react-ace\";\nimport axios from \"axios\";\nimport \"./App.css\";\n// import Participents from \"./Components/Participents.jsx\";\nimport \"ace-builds/src-noconflict/mode-python\";\n// import ChatOverlay from \"./Components/ChatOverlay.jsx\";\nimport \"brace/theme/terminal\";\nimport \"ace-builds/src-min-noconflict/ext-language_tools\";\nimport \"ace-builds/src-noconflict/snippets/python\";\nimport { useEffect, useState } from \"react\";\n////////////////////////////////////////////////////////////\nconst CLIENT_ID = \"99122d0aa958b08d0b22438887528695\";\nconst CLIENT_SECRET =\n  \"a4ccd14cd72e85c9bc12b7096c910430c9ba4d99df9d50abb3981103e85e7a06\";\nconst URL = \"v1/execute\"; //LocalHost Working Good\n\nconst App = (props) => {\n  const [Code, setCode] = useState(``);\n  const [Output, setOutput] = useState(\"ðŸ˜€\");\n  const [isOutputLoading, setIsOutputLoading] = useState(false);\n\n  useEffect(() => {\n    console.log(Code);\n  }, [Code]);\n\n  const handleCodeSubmit = async () => {\n    setIsOutputLoading(true);\n    const body = {\n      script: Code,\n      language: \"python3\",\n      versionIndex: \"0\",\n      clientId: CLIENT_ID,\n      clientSecret: CLIENT_SECRET,\n      stdin: \"abc\",\n      \"Access-Control-Allow-Origin\": \"*\",\n      \"Content-Type\": \"application/json\",\n    };\n\n    await axios\n      .post(URL, body, {\n        crossDomain: true,\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          crossdomain: \"true\",\n          crossorigin: \"true\",\n        },\n        proxy: { host: \"https://api.jdoodle.com/\" },\n      })\n      .then((res) => {\n        setIsOutputLoading(false);\n        console.log(res);\n        setOutput(res.data.output);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      {/* <Participents /> */}\n      <h6>URL Using : {URL}</h6>\n      <div\n        className=\"App\"\n        style={{\n          border: \"15px solid lime\",\n          padding: \"0px\",\n          borderRadius: \"20px\",\n          boxShadow: \"0 0px 20px #006600\",\n        }}\n      >\n        <AceEditor\n          enableBasicAutocompletion={true}\n          enableLiveAutocompletion={true}\n          enableSnippets={true}\n          value={Code}\n          onChange={(value) => {\n            setCode(value);\n          }}\n          mode=\"python\"\n          theme=\"terminal\"\n          style={{ width: \"100%\" }}\n        />\n\n        <button\n          id=\"codeSubmitButton\"\n          className=\"codeSubmitButton\"\n          disabled={isOutputLoading}\n          onClick={() => {\n            console.log(Code);\n            handleCodeSubmit();\n          }}\n          style={{\n            backgroundColor: \"yellow\",\n            color: \"black\",\n            height: 45,\n            width: \"100%\",\n            transition: \"1s\",\n            fontSize: 22,\n            textAlign: \"center\",\n            outline: \"none\",\n          }}\n        >\n          {isOutputLoading && \"Please Wait\"}\n          {!isOutputLoading && \"Execute\"}\n        </button>\n        {/* <Participents /> */}\n        <div\n          style={{\n            backgroundColor: \"black\",\n            overflowWrap: \"break-word\",\n            width: \"500px\",\n            height: \"auto\",\n            padding: \"10px\",\n            border: \"2px solid green\",\n          }}\n        >\n          <p\n            style={{\n              color: \"lime\",\n              fontFamily: \"monospace\",\n              textAlign: \"left\",\n              fontSize: 17,\n            }}\n          >\n            {\" \"}\n            Code OutPutt `Configured In Python For Testing Purpose ` : <br />{\" \"}\n            {\">\" + Output}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\n// import React, { useState, useEffect, useRef } from \"react\";\n\n// function App() {\n//   const [isVisible, setIsVisible] = useState();\n//   const [isFull, setIsFull] = useState(false);\n//   const onVisibilityChange = () => setIsVisible(document.hidden);\n//   const [Warning, setWarning] = useState(0);\n//   const AppRef = useRef(null);\n\n//   const onFocus = () => {\n//     console.log(\"Tab is in focus\");\n//     // alert(\"Focused\");\n//   };\n\n//   // User has switched away from the tab (AKA tab is hidden)\n//   const onBlur = () => {\n//     console.log(\"Tab is blurred\");\n//     setWarning(Warning + 1);\n//     alert(\"Blurred\");\n//   };\n\n//   useEffect(() => {\n//     window.addEventListener(\"focus\", onFocus);\n//     window.addEventListener(\"blur\", onBlur);\n//     // Specify how to clean up after this effect:\n//     return () => {\n//       window.removeEventListener(\"focus\", onFocus);\n//       window.removeEventListener(\"blur\", onBlur);\n//     };\n//   });\n//   useEffect(() => {\n//     window.addEventListener(\"visibilitychange\", onVisibilityChange);\n//     document.title = isVisible;\n//     // isVisible && setWarning(Warning + 1);\n//     return () => {\n//       window.removeEventListener(\"visibilitychange\", onVisibilityChange);\n//     };\n//   }, [isVisible, Warning]);\n\n//   return (\n//     <div className=\"App\" ref={AppRef}>\n//       {\" \"}\n//       <h1 style={{ color: \"yellow\", backgroundColor: \"#00AFFF\" }}>\n//         WARNING! : {Warning}\n//       </h1>\n//     </div>\n//   );\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import Main from \"./Main\"; : For Socket Testing\nimport App from \"./App\";\nimport { MemoryRouter } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <MemoryRouter>\n      <App />\n    </MemoryRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}